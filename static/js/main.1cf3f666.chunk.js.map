{"version":3,"sources":["Components/HashLin/HashLine.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Updater","gData","HashLine","useState","GgData","setGData","updateInterval","setUpdateInterval","windowHeight","setWindowHeight","prog","setProg","dropdownOpen","setOpen","intervalSet","setInter","workers","setWorkers","handleResize","window","innerHeight","useEffect","addEventListener","pData","bal","hashTotal","rigz","fetchy","address","a","fetch","res","json","data","beef","b","w","updateLine","then","balance","hashrate","i","push","rHash","console","log","aHash","name","cHash","dataG","map","length","shift","changeInter","e","interVal","target","value","clearInterval","setInterval","Container","fluid","Row","Col","className","Math","round","Progress","multi","bar","striped","color","ResponsiveContainer","width","height","ComposedChart","margin","top","right","bottom","left","Area","type","dataKey","stroke","strokeWidth","fill","Line","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","Legend","Button","onClick","ButtonDropdown","direction","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1cf3f666.chunk.js","sourcesContent":["//import react\r\nimport React, { useEffect, useState } from \"react\";\r\n//import componenets from react strap\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\n//progress bar from react strap\r\nimport { Progress } from \"reactstrap\";\r\n//importing componenets from rrecharts\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  LineChart,\r\n  Area,\r\n  Bar,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n//make global gData array var\r\nlet gData:any = [];\r\n//declare updatrer\r\nlet Updater:any;\r\n//initiate hashline function\r\nconst HashLine = () => {\r\n  //setting states\r\n  //set globaldata\r\n  const [GgData, setGData] = useState([]);\r\n  //update interval t/f state\r\n  const [updateInterval, setUpdateInterval] = useState(0);\r\n  //windows height state\r\n  const [windowHeight, setWindowHeight] = useState(50);\r\n  //progres bar state\r\n  const [prog, setProg] = useState(50);\r\n  //dropdown state\r\n  const [dropdownOpen, setOpen] = useState(false);\r\n  //interval state\r\n  const [intervalSet, setInter] = useState(10000);\r\n  //workers state array\r\n  const [workers, setWorkers] = useState([]);\r\n//dropdown toggle\r\n  const toggle = () => setOpen(!dropdownOpen);\r\n//resizeeing the windows based on the live window height\r\n  function handleResize() {\r\n    setWindowHeight(window.innerHeight - 200);\r\n  }\r\n  useEffect(() => {\r\n    setGData(gData);\r\n    handleResize();\r\n  });\r\n  window.addEventListener(\"resize\", handleResize);\r\n\r\n  //setting up async fetch function for \r\n  const fetchy = async (address:string) => {\r\n    let res = await fetch(address);\r\n    let data = await res.json();\r\n    return data;\r\n  };\r\n  //setup function to return its param(setup later for mutated map)\r\n  const beef = (b:any) => {\r\n    return b;\r\n  };\r\n//setting up global vars for the update line func to retun to for easy parsing\r\n  let pData\r\n  let bal:number\r\n  let hashTotal:number\r\n  let rigz\r\n  let w:any = []\r\n\r\n  //setting up update link function\r\n  let updateLine = () => {\r\n    //fetch to nano api for bal and hash\r\n    fetchy(`https://api.nanopool.org/v1/eth/balance_hashrate/0xcf0dfcd5d4d2c8a18b9f06289e99363bba0b1f98`).then(async (data) => {\r\n      //parse data  and assign vars async await\r\n      pData = await data.data;\r\n      bal = await pData.balance;\r\n      hashTotal = await pData.hashrate;\r\n    });\r\n    //fetch to nano api for reported hasrates\r\n    fetchy(`https://api.nanopool.org/v1/eth/reportedhashrates/0xcf0dfcd5d4d2c8a18b9f06289e99363bba0b1f98`).then(async (data) => {\r\n      //parse data  and assign vars async await\r\n      rigz = data.data\r\n      w = []\r\n      //for loop through data to push to workers state\r\n      for (const i of rigz) {\r\n        w.push(i.hashrate)\r\n      }\r\n      setWorkers(w)\r\n  })\r\n    //fetch to nano api for reported hasrates\r\n    fetchy(`https://api.nanopool.org/v1/eth/reportedhashrate/0xcf0dfcd5d4d2c8a18b9f06289e99363bba0b1f98`).then(async (data) => {\r\n      //parse data  and assign vars async await\r\n    let rHash = await data.data\r\n    console.log(rHash)\r\n    let aHash = (hashTotal + rHash) / 2\r\n    //push async await data to gData array\r\n    gData.push({ name: hashTotal, cHash: hashTotal, rHash: rHash, aHash:aHash});\r\n    //set progress bar state to bal\r\n    setProg(bal);\r\n    //let data = map of gData\r\n    let dataG = gData.map(beef);\r\n    //limit the number of datapoints for the chart to 6\r\n    if (dataG.length > 6) {\r\n      //remove the 1st el in the array\r\n      gData.shift();\r\n      //set the g data state\r\n      setGData(dataG);\r\n    }\r\n      //set the g data state\r\n    setGData(dataG);\r\n  })\r\n  };\r\n\r\n\r\n  //start the inteval button  tick function\r\n  let startTick = () => {\r\n    if (!updateInterval) {\r\n      console.log(\"clicked\");\r\n      //name the interval and start updateline funtion\r\n      Updater = setInterval(updateLine, intervalSet);\r\n      //setinterval state to true\r\n      setUpdateInterval(1);\r\n    }\r\n  };\r\n  //stop interval button funtion\r\n  let stopTick = () => {\r\nconsole.log(\"clicked pause\");\r\n//if the update interval is true\r\n    if (updateInterval) {\r\n      //clear the interval\r\n      console.log(\"pause\");\r\n      clearInterval(Updater);\r\n      //setinterval state to false\r\n      setUpdateInterval(0);\r\n    }\r\n  };\r\n//change interval fucntion based on dropdown\r\n  let changeInter = (e:any) => {\r\n    //declare interval is the dropdown target *1000\r\n      let interVal = e.target.value* 1000\r\n      //set interval state to that val\r\n        setInter(interVal)\r\n      //clear the interval\r\n      clearInterval(Updater)\r\n    console.log(interVal)\r\n    //set interval state to false\r\n    setUpdateInterval(0);\r\n    //set interval to named Updaters and run updateline set to interVal\r\n    Updater = setInterval(updateLine, interVal);\r\n    //set interval state to true\r\n    setUpdateInterval(1);\r\n    \r\n  };\r\n  \r\n  return (\r\n    <Container fluid> \r\n    <Row>\r\n      <Col className=\"text-center\">\r\n        Current Miner Balance ={prog}ETH | {0.1 - prog} ETH until deposit |{\" \"}\r\n        {Math.round(prog * 1000)}% there\r\n      <Progress value={prog * 1000} />\r\n      </Col>\r\n      </Row>\r\n      <Row>\r\n      <Col className=\"text-center\">\r\n        Worker HashRates\r\n        </Col></Row>\r\n      <Progress multi>\r\n        <Progress bar striped color =\"info\"value={workers[0]}>Beasty {workers[0]} M/H </Progress>\r\n        <Progress bar striped color=\"success\" value={workers[1]}>MiniMiner {workers[1]} M/H </Progress>\r\n        <Progress bar striped value={workers[2]}>MiniBoi {workers[2]} M/H </Progress>\r\n        <Progress bar striped color=\"warning\" value={workers[3]}>Ol' Miney {workers[3]} M/H</Progress>\r\n        <Progress bar striped color=\"danger\" value={workers[4]}>Ryzern {workers[4]} M/H</Progress>\r\n      </Progress>\r\n      <ResponsiveContainer width=\"100%\" height={windowHeight}>\r\n        <ComposedChart\r\n          data={GgData}\r\n          margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\r\n        >\r\n          <Area type=\"monotone\" dataKey=\"cHash\" stroke=\"#60BCB7\" strokeWidth={5}  fill=\"#82ca9d\"/>\r\n          <Line type=\"monotone\" dataKey=\"rHash\" stroke=\"#8E5EA2\" strokeWidth={5}  />\r\n          <Line type=\"monotone\" dataKey=\"aHash\" stroke=\"#262335\" strokeWidth={3} />\r\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\"/>\r\n          <Tooltip />\r\n          <Legend />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n      <Row>\r\n      <Button onClick={startTick}>Start Updates</Button>\r\n      <Button onClick={stopTick}>Pause Updates</Button>\r\n      <ButtonDropdown direction=\"up\" isOpen={dropdownOpen} toggle={toggle}>\r\n        <DropdownToggle caret>{intervalSet/1000}Seconds</DropdownToggle>\r\n        <DropdownMenu>\r\n          <DropdownItem value={2} onClick={(e) => changeInter(e)}>2</DropdownItem>\r\n          <DropdownItem value={3} onClick={(e) => changeInter(e)}>3</DropdownItem>\r\n          <DropdownItem value={4} onClick={(e) => changeInter(e)}>4</DropdownItem>\r\n          <DropdownItem value={5} onClick={(e) => changeInter(e)}>5</DropdownItem>\r\n          <DropdownItem value={10} onClick={(e) => changeInter(e)}>10</DropdownItem>\r\n          <DropdownItem value={20} onClick={(e) => changeInter(e)}>20</DropdownItem>\r\n          <DropdownItem value={25} onClick={(e) => changeInter(e)}>25</DropdownItem>\r\n          <DropdownItem value={30} onClick={(e) => changeInter(e)}>30</DropdownItem>\r\n          <DropdownItem value={35} onClick={(e) => changeInter(e)}>35</DropdownItem>\r\n          <DropdownItem value={40} onClick={(e) => changeInter(e)}>40</DropdownItem>\r\n          <DropdownItem value={45} onClick={(e) => changeInter(e)}>45</DropdownItem>\r\n          <DropdownItem value={50} onClick={(e) => changeInter(e)}>50</DropdownItem>\r\n          <DropdownItem value={55} onClick={(e) => changeInter(e)}>55</DropdownItem>\r\n          <DropdownItem value={60} onClick={(e) => changeInter(e)}>60</DropdownItem>\r\n     \r\n        </DropdownMenu>\r\n      </ButtonDropdown>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default HashLine;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport HashLine from \"./Components/HashLin/HashLine\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n       <HashLine  />\n       </Col>\n       </Row>\n       </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}