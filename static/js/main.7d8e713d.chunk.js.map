{"version":3,"sources":["Components/HashLin/HashLine.js","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Updater","gData","name","uv","pv","HashLine","useState","GgData","setGData","updateInterval","setUpdateInterval","windowHeight","setWindowHeight","prog","setProg","dropdownOpen","setOpen","intervalSet","setInter","handleResize","window","innerHeight","useEffect","addEventListener","fetchy","address","a","fetch","res","json","data","beef","b","console","log","updateLine","then","pData","balance","bal","hashrate","hashTotal","push","dataG","map","length","shift","changeInter","e","interVal","target","value","clearInterval","setInterval","Container","fluid","className","Math","round","Progress","ResponsiveContainer","width","height","ComposedChart","margin","top","right","bottom","left","Line","type","dataKey","stroke","fill","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","Legend","Button","onClick","ButtonDropdown","direction","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","App","Row","Col","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7d8e713d.chunk.js","sourcesContent":["import { Hash } from \"crypto\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\nimport { Progress } from \"reactstrap\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  LineChart,\r\n  Area,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nlet gData = [\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n  { name: \"b\", uv: 200, pv: 200 },\r\n];\r\nlet Updater;\r\nconst HashLine = () => {\r\n  const [GgData, setGData] = useState([]);\r\n  const [updateInterval, setUpdateInterval] = useState(0);\r\n  const [windowHeight, setWindowHeight] = useState(50);\r\n  const [prog, setProg] = useState(50);\r\n  const [dropdownOpen, setOpen] = useState(false);\r\n  const [intervalSet, setInter] = useState(10000);\r\n\r\n  const toggle = () => setOpen(!dropdownOpen);\r\n\r\n  function handleResize() {\r\n    setWindowHeight(window.innerHeight - 100);\r\n  }\r\n  useEffect(() => {\r\n    setGData(gData);\r\n    handleResize();\r\n  });\r\n  window.addEventListener(\"resize\", handleResize);\r\n\r\n  const fetchy = async (address) => {\r\n    let res = await fetch(\r\n      `https://api.nanopool.org/v1/eth/balance_hashrate/${address}`\r\n    );\r\n    let data = await res.json();\r\n    return data;\r\n  };\r\n  const beef = (b) => {\r\n    return b;\r\n  };\r\n  console.log();\r\n  let updateLine = () => {\r\n    fetchy(\"0x9a024dca12158e8ba0b45bb9d4ae1b1324c38861\").then(async (data) => {\r\n      let pData = await data.data;\r\n      let bal = await pData.balance;\r\n      let hashTotal = await pData.hashrate;\r\n      console.log(hashTotal);\r\n      gData.push({ name: hashTotal, uv: hashTotal, pv: 150 });\r\n      setProg(bal);\r\n      let dataG = gData.map(beef);\r\n      if (dataG.length > 8) {\r\n        gData.shift();\r\n        setGData(dataG);\r\n      }\r\n      setGData(dataG);\r\n    });\r\n  };\r\n\r\n  let startTick = () => {\r\n    if (!updateInterval) {\r\n      console.log(\"clicked\");\r\n      Updater = setInterval(updateLine, intervalSet);\r\n      setUpdateInterval(1);\r\n    }\r\n  };\r\n  let stopTick = () => {\r\n    console.log(\"clicked pause\");\r\n    if (updateInterval) {\r\n      console.log(\"pause\");\r\n      clearInterval(Updater);\r\n      setUpdateInterval(0);\r\n    }\r\n  };\r\n\r\n  let changeInter = (e) => {\r\n      let interVal = e.target.value* 1000\r\n        setInter(interVal)\r\n      clearInterval(Updater)\r\n    console.log(interVal)\r\n    setUpdateInterval(0);\r\n    Updater = setInterval(updateLine, interVal);\r\n    };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <div className=\"text-center\">\r\n        Current bal ={prog}ETH | {0.1 - prog} ETH until deposit |{\" \"}\r\n        {Math.round(prog * 1000)}% there\r\n      </div>\r\n      <Progress value={prog * 1000} />\r\n      <ResponsiveContainer width=\"100%\" height={windowHeight}>\r\n        <ComposedChart\r\n          data={GgData}\r\n          margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\r\n        >\r\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#82ca9d\" />\r\n          <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" />\r\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n      <Legend />\r\n      <Button onClick={startTick}>Start Updates</Button>\r\n      <Button onClick={stopTick}>Pause Updates</Button>\r\n      <ButtonDropdown direction=\"up\" isOpen={dropdownOpen} toggle={toggle}>\r\n        <DropdownToggle caret>{intervalSet/1000}Seconds</DropdownToggle>\r\n        <DropdownMenu>\r\n          <DropdownItem value={2} onClick={(e) => changeInter(e)}>2</DropdownItem>\r\n          <DropdownItem value={3} onClick={(e) => changeInter(e)}>3</DropdownItem>\r\n          <DropdownItem value={4} onClick={(e) => changeInter(e)}>4</DropdownItem>\r\n          <DropdownItem value={5} onClick={(e) => changeInter(e)}>5</DropdownItem>\r\n          <DropdownItem value={6} onClick={(e) => changeInter(e)}>6</DropdownItem>\r\n          <DropdownItem value={7} onClick={(e) => changeInter(e)}>7</DropdownItem>\r\n        </DropdownMenu>\r\n      </ButtonDropdown>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default HashLine;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport HashLine from \"./Components/HashLin/HashLine\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n       <HashLine  />\n       </Col>\n       </Row>\n       </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}